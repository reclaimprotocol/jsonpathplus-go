{
  "testData": {
    "goessner_spec_data": {
      "store": {
        "book": [
          {
            "category": "reference",
            "author": "Nigel Rees",
            "title": "Sayings of the Century",
            "price": 8.95
          },
          {
            "category": "fiction",
            "author": "Evelyn Waugh",
            "title": "Sword of Honour",
            "price": 12.99
          },
          {
            "category": "fiction",
            "author": "Herman Melville",
            "title": "Moby Dick",
            "isbn": "0-553-21311-3",
            "price": 8.99
          },
          {
            "category": "fiction",
            "author": "J. R. R. Tolkien",
            "title": "The Lord of the Rings",
            "isbn": "0-395-19395-8",
            "price": 22.99
          }
        ],
        "bicycle": {
          "color": "red",
          "price": 19.95
        }
      }
    },
    "company_data": {
      "company": {
        "departments": {
          "engineering": {
            "employees": [
              {"name": "Alice", "level": "senior", "role": "developer"},
              {"name": "Bob", "level": "junior", "role": "designer"}
            ],
            "manager": "Eve"
          },
          "sales": {
            "employees": [
              {"name": "Charlie", "level": "senior", "role": "rep"}
            ],
            "manager": "Dave"
          }
        },
        "metadata": {
          "founded": 2010,
          "location": "San Francisco"
        }
      }
    },
    "orders_data": {
      "orders": [
        {
          "id": "ORD001",
          "customer": {"name": "Alice", "type": "premium"},
          "items": [
            {"product": "laptop", "price": 999.99, "quantity": 1},
            {"product": "mouse", "price": 29.99, "quantity": 2}
          ],
          "status": "shipped",
          "total": 1059.97
        },
        {
          "id": "ORD002", 
          "customer": {"name": "Bob", "type": "regular"},
          "items": [
            {"product": "keyboard", "price": 79.99, "quantity": 1}
          ],
          "status": "pending",
          "total": 79.99
        },
        {
          "id": "ORD003",
          "customer": {"name": "Charlie", "type": "premium"},
          "items": [
            {"product": "monitor", "price": 299.99, "quantity": 1},
            {"product": "cable", "price": 19.99, "quantity": 3}
          ],
          "status": "shipped",
          "total": 359.97
        }
      ]
    },
    "simple_books": {
      "store": {
        "book": [
          {"title": "Book0"},
          {"title": "Book1"},
          {"title": "Book2"}
        ]
      }
    },
    "mixed_types": {
      "data": [
        42,
        "hello",
        true,
        null,
        {"key": "value"},
        [1, 2, 3]
      ]
    },
    "nested_arrays": {
      "matrix": [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
      ],
      "tags": ["red", "green", "blue"]
    },
    "complex_structure": {
      "users": {
        "1": {"name": "Alice", "age": 25, "active": true},
        "2": {"name": "Bob", "age": 30, "active": false},
        "10": {"name": "Charlie", "age": 35, "active": true}
      },
      "settings": {
        "theme": "dark",
        "notifications": {
          "email": true,
          "push": false
        }
      }
    },
    "edge_cases": {
      "empty": {},
      "emptyArray": [],
      "nullValue": null,
      "zeroValue": 0,
      "falseValue": false,
      "emptyString": "",
      "specialChars": {
        "hyphen-key": "value1",
        "space key": "value2",
        "123numeric": "value3",
        "": "empty key value"
      }
    }
  },
  "testCases": [
    {
      "name": "Authors of all books",
      "jsonpath": "$.store.book[*].author",
      "data": "goessner_spec_data",
      "category": "basic",
      "description": "Basic property access in arrays"
    },
    {
      "name": "All authors", 
      "jsonpath": "$..author",
      "data": "goessner_spec_data",
      "category": "recursive_descent",
      "description": "Recursive descent for specific property"
    },
    {
      "name": "All elements beneath root",
      "jsonpath": "$..*",
      "data": "goessner_spec_data", 
      "category": "recursive_descent",
      "description": "Complete recursive descent"
    },
    {
      "name": "Third book",
      "jsonpath": "$..book[2]",
      "data": "goessner_spec_data",
      "category": "array_access",
      "description": "Array index access with recursive descent"
    },
    {
      "name": "Books with ISBN",
      "jsonpath": "$..book[?(@.isbn)]",
      "data": "goessner_spec_data",
      "category": "filters",
      "description": "Filter by property existence"
    },
    {
      "name": "Books cheaper than 10",
      "jsonpath": "$..book[?(@.price<10)]", 
      "data": "goessner_spec_data",
      "category": "filters",
      "description": "Numeric comparison filter"
    },
    {
      "name": "Price properties not equal to 8.95",
      "jsonpath": "$..*[?(@property === 'price' && @ !== 8.95)]",
      "data": "goessner_spec_data",
      "category": "property_filters",
      "description": "Property name filter with value condition"
    },
    {
      "name": "Books not at index 0", 
      "jsonpath": "$..book[?(@property !== 0)]",
      "data": "goessner_spec_data",
      "category": "property_filters",
      "description": "Array index filter"
    },
    {
      "name": "Parent filter - simple",
      "jsonpath": "$.store.book[?(@parent.bicycle)]",
      "data": "goessner_spec_data",
      "category": "parent_filters",
      "description": "Parent object property existence"
    },
    {
      "name": "Debug: Simple books all",
      "jsonpath": "$..book[*]",
      "data": "simple_books",
      "category": "debug",
      "description": "Debug test for array access"
    },
    {
      "name": "Debug: Simple books filter",
      "jsonpath": "$..book[?(@property !== 0)]",
      "data": "simple_books",
      "category": "debug",
      "description": "Debug test for array index filtering"
    },
    {
      "name": "Array first element",
      "jsonpath": "$.matrix[0]",
      "data": "nested_arrays",
      "category": "array_access",
      "description": "First element access"
    },
    {
      "name": "Array last element",
      "jsonpath": "$.matrix[-1]",
      "data": "nested_arrays", 
      "category": "array_access",
      "description": "Last element with negative index"
    },
    {
      "name": "Array slice",
      "jsonpath": "$.matrix[0:2]",
      "data": "nested_arrays",
      "category": "array_slice",
      "description": "Array slice notation"
    },
    {
      "name": "Nested array access",
      "jsonpath": "$.matrix[1][2]",
      "data": "nested_arrays",
      "category": "nested_access",
      "description": "Deep array element access"
    },
    {
      "name": "All nested array elements", 
      "jsonpath": "$.matrix[*][*]",
      "data": "nested_arrays",
      "category": "nested_wildcard",
      "description": "Nested wildcard access"
    },
    {
      "name": "Property equals string",
      "jsonpath": "$.users[?(@property === '1')]",
      "data": "complex_structure",
      "category": "property_filters",
      "description": "String property comparison"
    },
    {
      "name": "Property not equals string", 
      "jsonpath": "$.users[?(@property !== '1')]",
      "data": "complex_structure",
      "category": "property_filters",
      "description": "String property negation"
    },
    {
      "name": "Property greater than",
      "jsonpath": "$.users[?(@property > '5')]",
      "data": "complex_structure", 
      "category": "property_filters",
      "description": "String property comparison"
    },
    {
      "name": "Array property equals number",
      "jsonpath": "$.data[?(@property === 0)]",
      "data": "mixed_types",
      "category": "property_filters", 
      "description": "Numeric property for arrays"
    },
    {
      "name": "Array property not equals number",
      "jsonpath": "$.data[?(@property !== 0)]",
      "data": "mixed_types",
      "category": "property_filters",
      "description": "Numeric property negation for arrays" 
    },
    {
      "name": "Parent property access",
      "jsonpath": "$.users.1[?(@parent.settings)]", 
      "data": "complex_structure",
      "category": "parent_filters",
      "description": "Parent object property existence"
    },
    {
      "name": "Parent property value",
      "jsonpath": "$.notifications[?(@parent.theme === 'dark')]",
      "data": "complex_structure",
      "category": "parent_filters",
      "description": "Parent property value comparison"
    },
    {
      "name": "Path filter",
      "jsonpath": "$.users[?(@path === \"$['users'][1]\")]",
      "data": "complex_structure", 
      "category": "path_filters",
      "description": "Path-based filtering"
    },
    {
      "name": "ParentProperty filter",
      "jsonpath": "$.users.1[?(@parentProperty === '1')]",
      "data": "complex_structure",
      "category": "parent_property_filters", 
      "description": "ParentProperty filtering"
    },
    {
      "name": "Null value filter",
      "jsonpath": "$.data[?(@ === null)]",
      "data": "mixed_types",
      "category": "value_filters",
      "description": "Null value comparison"
    },
    {
      "name": "Boolean true filter",
      "jsonpath": "$.data[?(@ === true)]", 
      "data": "mixed_types",
      "category": "value_filters",
      "description": "Boolean true comparison"
    },
    {
      "name": "Boolean false filter",
      "jsonpath": "$.data[?(@ === false)]",
      "data": "mixed_types", 
      "category": "value_filters",
      "description": "Boolean false comparison"
    },
    {
      "name": "Number filter",
      "jsonpath": "$.data[?(@ === 42)]",
      "data": "mixed_types",
      "category": "value_filters",
      "description": "Numeric value comparison"
    },
    {
      "name": "String filter",
      "jsonpath": "$.data[?(@ === 'hello')]",
      "data": "mixed_types",
      "category": "value_filters", 
      "description": "String value comparison"
    },
    {
      "name": "Logical AND filter",
      "jsonpath": "$.users[?(@.age > 25 && @.active === true)]",
      "data": "complex_structure",
      "category": "logical_filters",
      "description": "AND operator in filter"
    },
    {
      "name": "Logical OR filter", 
      "jsonpath": "$.users[?(@.age < 25 || @.active === false)]",
      "data": "complex_structure",
      "category": "logical_filters",
      "description": "OR operator in filter"
    },
    {
      "name": "Negation filter",
      "jsonpath": "$.users[?(!@.active)]",
      "data": "complex_structure",
      "category": "logical_filters",
      "description": "Negation operator in filter"
    },
    {
      "name": "Empty object access",
      "jsonpath": "$.empty[*]",
      "data": "edge_cases",
      "category": "edge_cases",
      "description": "Wildcard on empty object"
    },
    {
      "name": "Empty array access",
      "jsonpath": "$.emptyArray[*]",
      "data": "edge_cases",
      "category": "edge_cases",
      "description": "Wildcard on empty array"
    },
    {
      "name": "Zero value access",
      "jsonpath": "$.zeroValue",
      "data": "edge_cases", 
      "category": "edge_cases",
      "description": "Access zero value"
    },
    {
      "name": "False value access",
      "jsonpath": "$.falseValue",
      "data": "edge_cases",
      "category": "edge_cases",
      "description": "Access false value"  
    },
    {
      "name": "Empty string access",
      "jsonpath": "$.emptyString", 
      "data": "edge_cases",
      "category": "edge_cases",
      "description": "Access empty string"
    },
    {
      "name": "Special character keys",
      "jsonpath": "$.specialChars['hyphen-key']",
      "data": "edge_cases",
      "category": "edge_cases", 
      "description": "Key with special characters"
    },
    {
      "name": "Space in key",
      "jsonpath": "$['specialChars']['space key']",
      "data": "edge_cases",
      "category": "edge_cases",
      "description": "Key with space"
    },
    {
      "name": "Numeric key",
      "jsonpath": "$.specialChars['123numeric']",
      "data": "edge_cases", 
      "category": "edge_cases",
      "description": "Numeric string key"
    },
    {
      "name": "Empty key",
      "jsonpath": "$.specialChars['']",
      "data": "edge_cases",
      "category": "edge_cases",
      "description": "Empty string key"
    },
    {
      "name": "Deep recursive property",
      "jsonpath": "$..email",
      "data": "complex_structure",
      "category": "recursive_descent",
      "description": "Deep nested property search"
    },
    {
      "name": "Recursive with filter",
      "jsonpath": "$..[?(@.name)]",
      "data": "complex_structure", 
      "category": "recursive_filters",
      "description": "Recursive descent with filter"
    },
    {
      "name": "Recursive array access",
      "jsonpath": "$..matrix[0]",
      "data": "nested_arrays",
      "category": "recursive_descent",
      "description": "Recursive with array index"
    },
    {
      "name": "Union operator",
      "jsonpath": "$.data[0,2,4]",
      "data": "mixed_types",
      "category": "union",
      "description": "Union operator for multiple indices"
    },
    {
      "name": "Array slice with step", 
      "jsonpath": "$.data[0:6:2]",
      "data": "mixed_types",
      "category": "array_slice",
      "description": "Array slice with step"
    },
    {
      "name": "Negative slice",
      "jsonpath": "$.data[-3:-1]", 
      "data": "mixed_types",
      "category": "array_slice",
      "description": "Negative indices in slice"
    },
    {
      "name": "Length function",
      "jsonpath": "$.data[?(@.length > 3)]",
      "data": "mixed_types",
      "category": "function_filters",
      "description": "Length function in filter"
    },
    {
      "name": "Match function",
      "jsonpath": "$.users[?(@.name.match(/^A/))]",
      "data": "complex_structure",
      "category": "function_filters", 
      "description": "Match function with regex"
    }
  ]
}